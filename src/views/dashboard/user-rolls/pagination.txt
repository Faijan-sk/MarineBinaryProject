const handlePagination = page => {
  dispatch(
    getData({
      page: page.selected + 1,
      perPage: rowsPerPage,
      q: searchValue
    })
  )
  setCurrentPage(page.selected + 1)
}

const CustomPagination = () => {
  const count = Math.ceil(store.total / rowsPerPage)
  return (
    <ReactPaginate
      previousLabel={''}
      nextLabel={''}
      breakLabel='...'
      pageCount={Math.ceil(count) || 1}
      marginPagesDisplayed={2}
      pageRangeDisplayed={2}
      activeClassName='active'
      forcePage={currentPage !== 0 ? currentPage - 1 : 0}
      onPageChange={page => handlePagination(page)}
      pageClassName='page-item'
      breakClassName='page-item'
      nextLinkClassName='page-link'
      pageLinkClassName='page-link'
      breakLinkClassName='page-link'
      previousLinkClassName='page-link'
      nextClassName='page-item next-item'
      previousClassName='page-item prev-item'
      containerClassName={
        'pagination react-paginate separated-pagination pagination-sm justify-content-end pe-1 mt-1'
      }
    />
  )
}
