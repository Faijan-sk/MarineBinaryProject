import React, { useEffect, useState } from "react";
import DataTable from "react-data-table-component";
import { ChevronDown, Edit2, Trash } from "react-feather";
import { Row, Col, Input } from "reactstrap";
import RoleCards from "../user_rolls/roles-permissions/roles/RoleCards";
import Swal from "sweetalert2";
import withReactContent from "sweetalert2-react-content";
import useJwt from "@src/auth/jwt/useJwt";
import Role_modal from "../user_rolls/roles-permissions/roles/Role_modal";
import ReactPaginate from "react-paginate";

// ** Styles
import '@styles/react/libs/tables/react-dataTable-component.scss'

const CustomTable = ({ data, setNextPageLink, nextPageLink }) => {
  const [tableData, setTableData] = useState([]);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState("");
  const [role, setRole] = useState("");
  const [RowData, setRowData] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [dataUid, setDataUid] = useState(null);
  const [datarow, setDatarow] = useState(null);

  const MySwal = withReactContent(Swal);

  const handleDelete = async (uid) => {
    return MySwal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, delete it!",
      customClass: {
        confirmButton: "btn btn-primary",
        cancelButton: "btn btn-danger ms-1",
      },
      buttonsStyling: false,
    }).then(async function (result) {
      if (result.value) {
        try {
          // Call delete API
          const response = await useJwt.deleteRole(uid);
          if (response.status === 204) {
            // Show success message
            MySwal.fire({
              icon: "success",
              title: "Deleted!",
              text: "Your file has been deleted.",
              customClass: {
                confirmButton: "btn btn-success",
              },
            });
            window.location.reload(true);
          }
        } catch (error) {
          console.error("Error deleting item:", error);
        }
      } else if (result.dismiss === MySwal.DismissReason.cancel) {
        // Show cancellation message
        MySwal.fire({
          title: "Cancelled",
          text: "Your imaginary file is safe :)",
          icon: "error",
          customClass: {
            confirmButton: "btn btn-success",
          },
        });
      }
    });
  };

  const columns = [
    {
      name: "Id",
      sortable: true,
      minWidth: "150px",
      selector: (row) => row.id,
    },
    {
      name: "Role Name",
      sortable: true,
      minWidth: "250px",
      selector: (row) => row.roleName,
    },
    {
      name: "Actions",
      minWidth: "400px",
      cell: (row) => (
        <>
          <span
            color="danger"
            style={{ margin: "1rem", cursor: "pointer", color: "red" }}
            onClick={() => {
              setDataUid(row.uid);
              setDatarow(row);
              setShowModal((x) => !x);
            }}
          >
            <Edit2 className="font-medium-3 text-body" />
          </span>

          <span
            color="danger"
            style={{ cursor: "pointer", color: "red" }}
            onClick={() => handleDelete(row.uid)}
          >
            <Trash className="font-medium-3 text-body" />
          </span>
        </>
      ),
    },
  ];

  useEffect(() => {
    if (data && data.results) {
      setTableData(data.results);
    }
  }, [data]);

  const handleFilter = (value) => {
    setSearchTerm(value);
    if (value) {
      const filteredData = data.results.filter((row) =>
        row.roleName.toLowerCase().includes(value.toLowerCase())
      );
      setTableData(filteredData);
    } else {
      setTableData(data.results);
    }
    setCurrentPage(1);
  };

  const handlePagination = (page) => {
    setCurrentPage(page.selected + 1);
    const startIndex = page.selected * rowsPerPage;
    const paginatedData = data.results.slice(startIndex, startIndex + rowsPerPage);
    setTableData(paginatedData);
  };

  const handlePerPage = (e) => {
    setRowsPerPage(Number(e.target.value));
    setCurrentPage(1);
  };

  const CustomPagination = () => {
    const count = Math.ceil(data.count / rowsPerPage); // Total count of items
    return (
      <ReactPaginate
        previousLabel={''}
        nextLabel={''}
        breakLabel="..."
        pageCount={count}
        marginPagesDisplayed={2}
        pageRangeDisplayed={2}
        activeClassName="active"
        forcePage={currentPage !== 0 ? currentPage - 1 : 0}
        onPageChange={handlePagination}
        pageClassName="page-item"
        breakClassName="page-item"
        nextLinkClassName="page-link"
        pageLinkClassName="page-link"
        breakLinkClassName="page-link"
        previousLinkClassName="page-link"
        nextClassName="page-item next-item"
        previousClassName="page-item prev-item"
        containerClassName="pagination react-paginate separated-pagination pagination-sm justify-content-end pe-1 mt-1"
      />
    );
  };

  return (
    <>
      <Row className="text-nowrap w-100 g-0 permission-header" style={{ marginBottom: 0 }}>
        <Col xs={12} lg={4} className="d-flex align-items-center">
          <div className="d-flex align-items-center justify-content-center justify-content-lg-start">
            <label htmlFor="rows-per-page">Show</label>
            <Input
              className="mx-50"
              type="select"
              id="rows-per-page"
              value={rowsPerPage}
              onChange={handlePerPage}
              style={{ width: "5rem" }}
            >
              <option value="10">10</option>
              <option value="25">25</option>
              <option value="50">50</option>
            </Input>
            <label htmlFor="rows-per-page">Entries</label>
          </div>
        </Col>
        <Col xs={12} lg={8}>
          <div className="d-flex align-items-center justify-content-lg-end justify-content-start flex-md-nowrap flex-wrap mt-lg-0 mt-1">
            <div className="d-flex align-items-center me-1">
              <label className="mb-0" htmlFor="search-permission">
                Search:
              </label>
              <Input
                type="text"
                value={searchTerm}
                id="search-permission"
                className="ms-50 w-100"
                onChange={(e) => handleFilter(e.target.value)}
              />
            </div>
            <div>
              <RoleCards />
            </div>
          </div>
        </Col>
      </Row>

      <div className="react-dataTable">
        <DataTable
          noHeader
          subHeader
          responsive
          paginationServer
          columns={columns}
          sortIcon={<ChevronDown />}
          paginationComponent={CustomPagination}
          className="react-dataTable"
          data={tableData}
          paginationRowsPerPageOptions={[10, 25, 50]}
          paginationTotalRows={data.count}
          paginationPerPage={rowsPerPage}
        />
      </div>

      <Role_modal show={showModal} uid={dataUid} row={datarow} />
    </>
  );
};

export default CustomTable;
